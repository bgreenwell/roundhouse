library(httr)
modify_url("http://api.icndb.com/jokes/random/", query = 1)
modify_url("http://api.icndb.com/jokes/random/", query = "1")
modify_url("http://api.icndb.com/jokes/random/", params =  = "1")
modify_url("http://api.icndb.com/jokes/random/", params = "1")
?modify_url
modify_url("http://api.icndb.com/jokes/random/", path = "1")
n <- 1
modify_url("http://api.icndb.com/jokes/random/", path = n)
# Query the NPPES API
url <- modify_url("http://api.icndb.com/jokes/random/", path = n)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
jsonlite::fromJSON(content(resp, "value"), simplifyVector = FALSE)
jsonlite::fromJSON(content(resp, "parsed"), simplifyVector = FALSE)
resp
content(resp)
content(resp, type = "text")
content(resp, type = "raw")
?content
content(resp, as = "raw")
content(resp, as = "text")
content(resp, as = "parsed")
url
?modify_url
modify_url("http://api.icndb.com/jokes/random/", fragment  = n)
# Query the NPPES API
# url <- modify_url("http://api.icndb.com/jokes/random/", path = n)
url <- paste0("http://api.icndb.com/jokes/random/", n)
url
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse the returned JSON file
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
parsed
#' Random Chuck Norris Fact
#'
#' Query the internet Chuck Norris databse (ICNDb) for a random Chuck Norris
#' fact.
#'
#' @param n Integer specifying the number of random facts to return. Default is
#' \code{1}.
#'
#' @param include Character string specifying the category of the joke. Default
#' is \code{NULL} meaning use all available categories in the query. The
#' available categories can be viewed using \code{fetch_categories()}.
#'
#' @param exclude Character string specifying the categories to excluse.
#' Currently ignored. Default is \code{NULL} meaning use all available
#' categories in the query. The available categories can be viewed using
#' \code{fetch_categories()}.
#'
#' @return TBD.
#'
#' @rdname random_fact
#'
#' @export
#'
#' @examples
#' random_fact()
random_fact <- function(n = 1L, include = NULL, exclude = NULL) {
# Query the NPPES API
# url <- modify_url("http://api.icndb.com/jokes/random/", path = n)
url <- paste0("http://api.icndb.com/jokes/random/", n)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse the returned JSON file
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
# Turn API errors into R errors
if (http_error(resp)) {
stop(
sprintf(
"ICNDb API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
# Return a nppes_api object (a list)
structure(
list(
"content" = parsed,
"query" = query,
"response" = resp
),
class = "random_fact"
)
}
#' @rdname random_fact
#'
#' @export
print.nppes_api <- function(x, ...) {
# cat("<NPPES ", x$path, ">\n", sep = "")
# str(x$content)
x$value$joke
invisible(x)
}
random_fact()
#' Random Chuck Norris Fact
#'
#' Query the internet Chuck Norris databse (ICNDb) for a random Chuck Norris
#' fact.
#'
#' @param n Integer specifying the number of random facts to return. Default is
#' \code{1}.
#'
#' @param include Character string specifying the category of the joke. Default
#' is \code{NULL} meaning use all available categories in the query. The
#' available categories can be viewed using \code{fetch_categories()}.
#'
#' @param exclude Character string specifying the categories to excluse.
#' Currently ignored. Default is \code{NULL} meaning use all available
#' categories in the query. The available categories can be viewed using
#' \code{fetch_categories()}.
#'
#' @return TBD.
#'
#' @rdname random_fact
#'
#' @export
#'
#' @examples
#' random_fact()
random_fact <- function(n = 1L, include = NULL, exclude = NULL) {
# Query the NPPES API
# url <- modify_url("http://api.icndb.com/jokes/random/", path = n)
url <- paste0("http://api.icndb.com/jokes/random/", n)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse the returned JSON file
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
# Turn API errors into R errors
if (http_error(resp)) {
stop(
sprintf(
"ICNDb API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
# Return a nppes_api object (a list)
structure(
list(
"content" = parsed,
"response" = resp
),
class = "random_fact"
)
}
#' @rdname random_fact
#'
#' @export
print.nppes_api <- function(x, ...) {
# cat("<NPPES ", x$path, ">\n", sep = "")
# str(x$content)
x$value$joke
invisible(x)
}
random_fact()
#' Random Chuck Norris Fact
#'
#' Query the internet Chuck Norris databse (ICNDb) for a random Chuck Norris
#' fact.
#'
#' @param n Integer specifying the number of random facts to return. Default is
#' \code{1}.
#'
#' @param include Character string specifying the category of the joke. Default
#' is \code{NULL} meaning use all available categories in the query. The
#' available categories can be viewed using \code{fetch_categories()}.
#'
#' @param exclude Character string specifying the categories to excluse.
#' Currently ignored. Default is \code{NULL} meaning use all available
#' categories in the query. The available categories can be viewed using
#' \code{fetch_categories()}.
#'
#' @return TBD.
#'
#' @rdname random_fact
#'
#' @export
#'
#' @examples
#' random_fact()
random_fact <- function(n = 1L, include = NULL, exclude = NULL) {
# Query the NPPES API
# url <- modify_url("http://api.icndb.com/jokes/random/", path = n)
url <- paste0("http://api.icndb.com/jokes/random/", n)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse the returned JSON file
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
# Turn API errors into R errors
if (http_error(resp)) {
stop(
sprintf(
"ICNDb API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
# Return a nppes_api object (a list)
structure(
list(
"content" = parsed,
"response" = resp
),
class = "random_fact"
)
}
#' @rdname random_fact
#'
#' @export
print.random_fact <- function(x, ...) {
# cat("<NPPES ", x$path, ">\n", sep = "")
# str(x$content)
x$value$joke
invisible(x)
}
random_fact()
random_fact()
print.random_fact <- function(x, ...) {
# cat("<NPPES ", x$path, ">\n", sep = "")
# str(x$content)
x$resp$value$joke
invisible(x)
}
random_fact()
resp
print.random_fact <- function(x, ...) {
# cat("<NPPES ", x$path, ">\n", sep = "")
# str(x$content)
x$content$value$joke
invisible(x)
}
random_fact()
parsed
parsed$value
parsed$value$joke
parsed$value[[1]]
parsed$value[[2]]
parsed$value[[1]]
parsed$value[[1]]$joke
print.random_fact <- function(x, ...) {
# cat("<NPPES ", x$path, ">\n", sep = "")
# str(x$content)
x$content$$value[[1]]$joke
invisible(x)
}
print.random_fact <- function(x, ...) {
# cat("<NPPES ", x$path, ">\n", sep = "")
# str(x$content)
x$content$value[[1]]$joke
invisible(x)
}
random_fact()
#' Random Chuck Norris Fact
#'
#' Query the internet Chuck Norris databse (ICNDb) for a random Chuck Norris
#' fact.
#'
#' @param n Integer specifying the number of random facts to return. Default is
#' \code{1}.
#'
#' @param include Character string specifying the category of the joke. Default
#' is \code{NULL} meaning use all available categories in the query. The
#' available categories can be viewed using \code{fetch_categories()}.
#'
#' @param exclude Character string specifying the categories to excluse.
#' Currently ignored. Default is \code{NULL} meaning use all available
#' categories in the query. The available categories can be viewed using
#' \code{fetch_categories()}.
#'
#' @return TBD.
#'
#' @rdname random_fact
#'
#' @export
#'
#' @examples
#' random_fact()
random_fact <- function(n = 1L, include = NULL, exclude = NULL) {
# Query the NPPES API
# url <- modify_url("http://api.icndb.com/jokes/random/", path = n)
url <- paste0("http://api.icndb.com/jokes/random/", n)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse the returned JSON file
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
# Turn API errors into R errors
if (http_error(resp)) {
stop(
sprintf(
"ICNDb API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
# Return a nppes_api object (a list)
structure(
list(
"content" = parsed,
"response" = resp
),
class = "random_fact"
)
}
#' @rdname random_fact
#'
#' @export
print.random_fact <- function(x, ...) {
# cat("<NPPES ", x$path, ">\n", sep = "")
# str(x$content)
x$content
# x$content$value[[1]]$joke
invisible(x)
}
random_fact()
class(random_fact())
library(Roundhouse)
random_fact()
library(Roundhouse)
random_fact()
# Query the NPPES API
# url <- modify_url("http://api.icndb.com/jokes/random/", path = n)
url <- paste0("http://api.icndb.com/jokes/random/", n)
resp <- GET(url)
resp
# Parse the returned JSON file
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
parsed$type
parsed$value
parsed$value[[1]]$joke
